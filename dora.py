#!/usr/bin/python3.8
"""
คำอธิบาย

โดร่าและผองเพื่อนของเธอได้ทำการสำรวจเกาะต่างๆ จากแผนที่ของเธอ ซึ่งเธอต้องการให้คุณช่วยนับเกาะในแผนที่ว่ามีจำนวนเกาะทั้งหมดกี่เกาะในแผนที่ ซึ่งในแผนที่นั้น จะใช้ # แทนสัญลักษณ์ของพื้นดิน และ . แทนสัญลักษณ์ของน้ำ ซึ่งถ้าพื้นดินอยู่ติดกัน(ทิศเหนือ ทิศใต้ ทิศตะวันออกและทิศตะวันตก)จะถือว่าเป็นเกาะเดียวกัน

รูปแบบ Input

บรรทัดแรก รับค่าจำนวนเต็มบวก n และ m หมายถึง ขนาดของแถวและคอลลัมของแผนที่ตามลำดับ

อีก n บรรทัดต่อมา รับค่า # หรือ . หมายถึง สัญลักษณ์ของแผนที่ จำนวน m ตัว

n,m <= 100

Case 1:

4 4
###.
##..
#.##
.###

 return 2

Case 2:

5 5
...##
...#.
.##..
...#.
#.##.

 return 4

Case 3

5 6
..#.##
###...
.#...#
#####.
#...#.

 return 3
"""


island = '#'
sea = '.'


def upper(i):
    if i - 1 < 0:
        return 0
    return i - 1


def left(j):
    if j - 1 < 0:
        return 0
    return j - 1


def merge_marked(marked, old, new):
    for r in range(len(marked)):
        for c in range(len(marked[r])):
            if marked[r][c] == old:
                marked[r][c] = new
    return marked


def count_island(map_data):
    marked = []
    marked_index = 1
    merge_list = []
    for r, row in enumerate(map_data):
        marked_row = []
        for c, cell in enumerate(row):
            if r == 0 and c == 0:
                if cell == island:
                    marked_row.append(marked_index)
                else:
                    marked_row.append(-1)
                    marked_index += 1
            elif r == 0:
                if cell == island:
                    if marked_row[left(c)] < 0:
                        marked_index += 1
                    marked_row.append(marked_index)
                else:
                    marked_row.append(-1)
                    marked_index += 1
            else:
                if cell == island:
                    # New island found
                    # print(marked_row, r, c)
                    if c == 0:
                        if marked[upper(r)][c] < 0:
                            marked_index += 1
                        # Has top connected
                        elif marked[upper(r)][c] > 0 and marked[upper(r)][c] != marked_index:
                            # print(f'merge {marked_index} => {marked[upper(r)][c]}')
                            merge_list.append([marked_index, marked[upper(r)][c]])
                        marked_row.append(marked_index)
                    else:
                        if marked[upper(r)][c] < 0 and marked_row[left(c)] < 0:
                            marked_index += 1
                        # Has top connected
                        elif marked[upper(r)][c] > 0 and marked[upper(r)][c] != marked_index:
                            # print(f'merge {marked_index} => {marked[upper(r)][c]}')
                            merge_list.append([marked_index, marked[upper(r)][c]])
                        marked_row.append(marked_index)
                else:
                    marked_row.append(-1)
                    marked_index += 1
        marked_index += 1
        marked.append(marked_row)

    merge_group = []
    for merge_pair in merge_list:
        # print(merge_pair)
        old = merge_pair[0]
        new = merge_pair[1]

        grouped = False

        join = []
        for i, group in enumerate(merge_group):
            if new in group or old in group:
                merge_group[i].append(old)
                merge_group[i].append(new)
                merge_group[i] = list(set(merge_group[i]))
                # print(f'added {i} {old} {new} => {merge_group[i]}')
                grouped = True
                join.append(i)

        if join and len(join) > 1:
            # print('join', join)
            new_merge_group = []
            _joined = []
            for i, _g in enumerate(merge_group):
                if i in join:
                    _joined += merge_group[i]
                else:
                    new_merge_group.append(merge_group[i])
            new_merge_group.append(_joined)
            merge_group = new_merge_group

        if not grouped:
            merge_group.append(merge_pair)
            # print(f'set => {merge_pair}')

    for group in merge_group:
        group.sort()
        new = group[0]
        for old in group[1:]:
            merge_marked(marked, old, new)

    island_list = []
    island_count = 0

    for row in marked:
        for cell in row:
            if cell > 0 and cell not in island_list:
                island_list.append(cell)
                island_count += 1

    # for row in marked:
    #     print('\t'.join([str(d) for d in row]))
    # print(island_list)
    # print(merge_group)
    return island_count


def get_map(data_str):
    data = data_str.split('\n')
    n, m = [int(d) for d in data[0].split(' ') if d]
    map_data = [d[:m] for d in data[1:n+1]]

    # print(n, m, map_data)
    return map_data


test_1 = """25 20
.###...#...#...#..##
...#....#.###.#.#.##
.#..#.##....#.....#.
#..#.###.#####.##..#
.##...############..
.#.#..#...##..#...#.
...#...#.#####.#...#
##.###...#..#...#.#.
##.##....###..#.#...
#.##..####..#.#.#..#
##.#....#.#...###.##
###########...##.###
..#..#.##...##....#.
..##...###..###...##
##....##..###.#.##.#
.######........##...
...##.#...###......#
######..#..##...####
..###...#.#..#.#.##.
####..#.####...#..##
##...#..##.#..##.##.
...##...########..#.
##.###.##..#.#....##
.#.##..##..#.......#
...#.#...###.#..#.##"""


test_2 = """35 40
..####..##....#....####....#.#..#....#..
.#..###.######.#..#..##.#.##....#..#..##
.#.#.##.#..#.###....###.#.##.#####...#.#
#..##.###..###.##..####.###.##.#.#..#.#.
.....#..#.#..#.###..#..#..##.#.....#...#
..#..####.#.##...#.#....###..###.#..##.#
...#.#......##....##..#.##.#####.#...###
...###..#.##.###.#.##.###..#...#.#.#...#
.###..##..##....##.#.##..##.#...##....#.
.##..###..##.#....##...#.##...###......#
..##.#.#.#.#..#..###..#.#.##.######.####
#.#.###..##..........###..####..###..###
..#...#.#....#####..#..##.....###..#####
..#...#...#....###.###..#...##.#####..##
#..#.###.#.....#....#.#..###.#...#....##
.#.#####...#.##.#...##..###.####..#..##.
###.####.#.###...#.#..#...##..##.#..#..#
#.##..#...#....###..#.###.##..####...#..
..#.#..##..##...###.###..####..#.###....
###...###....#.#.####.####.##.#.#..#.#..
####..#.###..#..#.##..###....##.##.##.##
##.####..##.#########...##.#.###.######.
.###.##.#...###.##...#.#.##..#....###..#
.####.##.####.#.###.####.....#.##..##.##
##.#.##.###..##.###.#..#...#####.##.###.
#..##.#.#.#.#.##.#.###...##.#.#####..#.#
#.##.#..##..##..##.....####.#..###.###.#
####.##.#.###..##.####..######....#..###
.#.##.###..#....#....###.......#.#.#...#
#.###..###....######..###....#..###.#.#.
.##...##.##.##...#...##..........#####.#
#.#.#...#.#....#..#...#.#.###.#.##.#.#..
###.#####..##....#.#######..##..#####.##
######.###.##.#.#.#.#..##.#.#.....######
.##.#...#..#....#..#####..#.#..##..###.."""


test_3 = """100 100
##.##.##....##...#.###..####.##.####.#.#####..##.###..#####.#.###..##.##...##..###..##.##.#..##..##.
#.....###.######.##..###....#...###...#.#.###.###.###.#.##..#.###.##...........#.#....###.##...#...#
.###.....###.#....###..#..#..#..##..##.#.#..#......#.####..#...#..##.####.###..#..#...###.###.....##
.##...####..##.#.#.#..###.###..##..###.####...#.##...######...............#.###....###...#...###.#..
.#.##..###.##...##.#.##.#..####..#....###..#.#.#######.#.#.#.....#.....##.##.###...#.##.#.##....###.
...###...#....##.######.##...####.##.#.###.#.#...#..#.....#.###.#.#.#.###...#...##..###..#.###....##
#.#.#.####..##.##.#.#...#.#.#.#.....#..###...#......#####...####..##...###.##.#..#..#.########.###..
##.#.#..#.#.####.#...#.####.#.##.#.##..#...##..##.#.#..##.##.##..#...##.#####.###.###..##.##..####..
.#..##.###...#.####.##.##.##..#..###...#.#.....######.#.#.#....#.#..###.#..#..###.#...##...##...#...
#.#.##..##...##.####.#...#....#...#.....##.##.###.#.###...#.########.#.##........###..#.#..#.##...#.
#..##.##...##.##..##.#.#..#..#..##.#.....###.#.###.....#..#...##...##..#..##..#.##..##..##...##..#..
...####..#.#..#....###.##...##.#..##.#.#..#####.####....#...#..#..###...#..#..###.##.#..#########...
.##.##..###.##........#....##.....###.#.#.#.#.#..####.#.#.#....#..#...#.##...#....#..#...#..#.####.#
.####.##.....########..####...##.#...#....#.#####.#####..#.#######..#.#.#######.#..####.##...####.##
.##.###..#.#......#.#..#....#.#.##..#.##......##.###..#..##...###..#..#...##...##.####....#....##.#.
.#..##..#..###..#...##..#.#..#...##..##.#.#....#.#.#...#..####..###.#..#..#..#..###.##.....#..#.####
...##.#..#..#..###.....#######...##.#.#.##...#..##....#.#..####....##.#..###..#.###.###.#.##.##..###
#.###.#..####.##.##.#.#####.#..###..#..##.....####.......##..#..########..#.###.#.###..#.####.#.#...
###.###.####...#..###.#######.#.#.##...##..####...##...##.#.##.#....#..###.####..###..#.#..##...#.#.
#####.#.........####...##..#..#..#.#.....#..##...####.##.##..##....##.##.....###...#.##.#..#...##...
....##.##...###.##.###...#.#.###...#..##..#..##.#.##....#.####.#...#.###.#.#..#.#.##.##..###.#.#...#
#....#.#####...#...##.#.##.###..#########.#.#...#####..#####...##..#######...#.#.#.###.###..##...#..
..#.....##.#....#.##.#..##..####.#..######.#####.##..#.....#..###..##..####.####.#####.##..##.#####.
.########.#.###.....##.#.###..#..###......#####...#..#..####.#.#...####..#..#...#..##.##...#######..
..####..#..#.#...#.##..#.#####.##.##.#####...###..#...#..#.##..###.###....#.#.#.....#..........##.#.
..#.##.........##.#....#..##.##.#..#..#..#..#.#.#.#.##.#.#.##.###....#.##.##..##....##.###.#.#..#.##
..#..##.##.....#..#.##..##.#####..#.#..##.###....###.####.##.##.#.#.##..###....#..#.##.##.#.####...#
#...##........#.##.#..#..#.###..####...####...#.##.#...#...#.#........#..#.##..#.#.##..##.#.....###.
.#..............#.##.#.#........##.##...#.#.#.....#..########..##.##.##.#.....#...###.#..##..#.##.#.
.#.#####.#.#..#....###..#.####..#...#..###..###..#.#.#....##.....#..##.#.....#..#..#...###.###.....#
.###..#.#.####...##..#....####..#..###.##...#..#..######.####...#.#....#.###.#####.#.###...####.##.#
...#.####.....###..#.###...###..##..#...##.###.....##..####.###.#..#...#..#####...##..#.#....#.#####
#.#..###..##....###..##.#.#...##.....#..#..#....##...###.#.###...#..#..###..#...#.#....#...##.#...#.
####.#.#.#.##..###.#.###.....##.#####...##..###.##....#..#..#..#.#..#...###..##.########..##..##....
.##....##.....##.##.#.###..#..#..#.##......#...####.###.#.#.#.###.#.####....#...##.####..#####...#..
.##...##..#.#.##..#.#######.#...#...##.####.#..#....#.#####..##.#...#.#..#.####...#...#..#.#..##.###
....##...#..#.#.##.###.#.#.##.#.#.#.#.#.#.######.#...#.#.##..#.##..#..#.###..#.#.##....#.#.#....##.#
#.##..#####..##.#..#####.#..#.#.#..#..#####.#.##..........##.#####.##.#.###.###...##..#.##..##..####
#.....#...#..#.#.##.#.#...#.##........##.##..###.##.#...#...#.#...###.###.#....#...#.#.##.####..#..#
.#.###.####.#..##..##.#.##.###...#...###.###..#...##.##.#.###..#####..##..#.....####.##.####.#....##
##.###.#####.#.####.######...#.#...#..###...#...##.#..#.....###....#.###.#....##.#.###.....#..#.###.
#.##..##..##.##.#...##...##.....##.##......#####.#####..#.##.####.#.#.###..##.##.#...#..###.##.#.#..
....#.##.#....#.##..#.....###.#..#.##...#...####..##.#..##....##.##.#...#.#.#...##..#.###.####..#.#.
#...###.#..##....#.##..#......###..#####.#..###...###...#..###.#....#....#..#.##.###.#...#...#...##.
.........##..#..#...##.#..####.##.#.#...##.##....#...###..##.#..#.###.#...###....####......#..##.##.
#..####.##.#..#.#.###.#.#.#...##.##.#.##.#.#....#..#.##..#..####.#.##.....##.##...#....#....#..###.#
.##....###.#..####..####.#...##.###.......#.#...#.#####....#.##..#..#.#...##....#..##..###.#..####.#
..#.##.#...#.#.#.#..#..##.#.#.###..##.##.#..#.#.#...#.#.#.###..##..#.#..###..#######.###...##.###..#
#######..#......###.###.....#..#.###...##.#...#...#.#####..#....##.##.#....#.#..#.#....#...###...###
##...##.#..###.##..#...#.##......#.##.###..###..###..#.#.######...#..#######.##...##.##.#...#.##.##.
####.###.#..#.######..........#.#.##....#....##.##.#.##.##...######.....##.#..###...#..###.#.##.#.#.
###...#..##........##..##....##.####.#.....#.#####.##..#.#.####.##.###..####..###...#######..###.#.#
##.#...#.#.###.#..#.#..#.##..###.##.#.####.##.#####.##....#.##..#.#..#.#.....###.####.#......#..#...
#....#..#....###..#..##..#..##..#.#.#..#.##..#...#..##.#.#.###.#.##.###.#....#.#.#....###...#....###
........##.##.##..###.#.....#....###.###.#.##.##.#.#...###......##.##.###..###.#.#..##..##..#.#....#
#.#####..#...#.#####.##..###.######.#.##.#####....##.#.###.#..#..##.#..###.#....#...##.###.#...#.#..
##.#.#.#####.#.#.######..####.#..#.#.##.###...##.##..#######..###.#..#######.##..###.#.#.#..#..####.
###.####...#######.#.#.#...##...###...####..#.##......#.#.#.#.#..#####......#..#..##....#.#.##.##.##
...#.###.#....#.....#.##..#.#..##.###...#....#..#..##.#.####.##.##.####......###..#.####....##..##.#
#..........##...####....#.#........#####..###....#.#...#.....#.#.#.####..##..#........#.##.....#..##
...##...#####.##.##.#.###..##.######....####.#####....#.#...##.......#...#.#.#.#...###..#.####..#.##
#..##.###.#...#.....###..##.#.#..####...###..#...#.......####.#.#.#########..#....#.#......##.#.##..
#.#.#.##..#..#.#...##..######.####..###.#.#######.#.#.##.##.##.#.#.##....#..#..####......###.#..#...
.#....#.##...#..#...####..##.###..#####..###...##...#.#..##...##.#..#..#..###.#.##.##..#####.#.#####
.#...##..#.###...##.#.##...#..##..######.#.####...#.#.########..##.####.#.###..###....#..#..##......
#...#.#.....###..#.##...#......#..##..##.####..#.##.#.#.#..#.#........############.#..####.#.#.#..#.
#.###...#.#######.#..####...#...#..##..#.#.#.##.###.##.##...#..#....#####...##.#..#..#...###..##....
#.#..#####.###.#..#..####.###..###.#.#.###...#....#.....#.#.##......##.###.....##..#.#.##.##..#.##..
.###.....#.##..#...###.######.##..#.#.#.#.......#.####.#####.#..#.....###.#.##.#..#.###.#.##..#..###
.#....####..#...#..##.##.....##.####.#.###..#..##.####..##.##.....#.#.###.#.##..###....##..#.#...#.#
##..#.####.##..######.##..####..#####....#.##..#####.####.###.....#.##...###.#.#.##..#....#.##.###..
#.#.....#....#.#....#..#......#.#..##.####.###..#.#.##..##.##..###.###.#..#####.#.###.#.#.#.#.#.#..#
##...##..####..##....#..#.#..#..#.##...#.###...#..##..#..#..#..#.##.###.##.#.###.....#..###.#.###..#
.####...#....#.####..#.#..###.###..##.#.....####..#####..#....####.#.###....#...##.##.#...##....####
###....##.#..#.###..##.##..##.##..##.....#..#...##.#....#.#.....#.##..#.##.#...#.#..#.##.....#..##..
.#.#..#.#.##.#.#.###.##.##..###..#..###.##.#...#######.#.##.##.#..###.####..#.#...#.##.###...###..##
#.##.##.#.###.#.###..##.####.#..#.#..##.#.#..#......###..#.....#...#.#.#..#####....##..#.#...####.#.
.#..#.#..###....##...##..##....####..#...#.##..###...#.....#..#..##.##.#.#.###.#.#.##.#.##...#.#####
#..####.##.###.....#.....#####..##.#######...#..#...####........#..#.###.#.#..#.#..##...#.###.##..#.
###.##.##..#.#.##.#..#.###..#.######.#.#.#####..##...##..##..#..####.#...#.####....#....#.....#.#..#
.####.##.##....#...##..#.#.##....#...##.#..#.###.#.#.###.##.#####....#....#.#####..##.#.#.####.#..#.
#.......#....#.######.###..#######.#..###...#.#...#.#######..##.#.##..##.##.###..#...##.###...##.###
#..#.####..#......###.#...###..#..##.#.###..####..##.#####..###.##...#.#.........####.#.####....#.##
#####.##.##.######...#....#.####.#...####.##.#.......##..#.###.###..#..##....###.###....#...#..###..
##.###.#####.....##.#........#.###...#.###.####...####..###.#....###.....#...###.###.#.####.#.#.####
...#.#.##...####...##...#..#...###.#####.#..####..####.###..#...###....###...#..#...#.#.######.#.#.#
..##...#...##.##...##.###...###..#..#..#..####.##..##...##...#...###..####.#####..#.##.#..######...#
####.##..#....##..######.##.#.##.#..#..###......###...##.##..#.#.##...........#.#..#..#.###..##..##.
..#....####......##..####...##.#....#...##.##......#.###.##.##...###..#.#....###.#.....#.....#..#...
.##..####...##.#...#######.#.#..##.#...#.##....#.###..#.#...#.#...#..##........#.#..###.....##......
#..###.#.##....#..#.#.#.#.####.##...##.#..##..#..##.###.#..#.##..##.#.##.#.#.#####.###........#..#..
..######..###..##.#.#.#####..#...#...###.###..#.#.#..###..##.#...#..###.#.######.#.#####.##..#.####.
###...#.#####..##.#.#...##.##.######...##..##..##.#.##.#.#.#...##########....#.#...##.#.#...#..#..#.
#..####.#..##..#.#.#.#.##.####.#####.#######.#.##..#...##......#...#####..####....#...##......##....
.###.#..##.####.##......####.##..###..######...#.#####.#.##.#.#..#.##..####.#...#....#....###.##.###
##........##.....##.#.###.#.##..#.#####.####.##......#.#.#...##...##..#..###..##....#.#..##.#.#.####
#..###.####...####.#.####....##.##..#.#####.#######.##.#.#.##.#.###.#....##.....###.#..####.#.....#.
..##.#.....#.#....###...#...#.#...#.##.#######.##.##......##.#.##.####....#.....##.#####.#.###.#..##
.#...#...#..##.#.##..#.##.##.##.....#........#.....#.##.#..#.####.####....##.###.#######..#..###.##.
#.#####.#####..#.###...#.#.#.#...#..##.#....###.#.#.#..#..#...#.#.#.#.##..##..###.###.###.......##.."""

if __name__ == '__main__':
    tests = [test_1, test_2, test_3]
    answers = [35, 86, 666]

    for test_data, ans in zip(tests, answers):
        result = count_island(get_map(test_data))
        assert ans == result, print(ans, result)
        print(result)
